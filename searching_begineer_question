https://leetcode.com/problems/rotate-string/

class Solution {
    public boolean rotateString(String s, String goal) {
        //with using string + string techgnique
        if(s.length()!=goal.length()){
            return false;
        }
        return (s+s).contains(goal);
    }
}


https://leetcode.com/problems/sqrtx/description/

first way to solve

class Solution {
    public int mySqrt(int x) {
        if(x ==0) return 0;
        int ans = 0;
        for(int i=0;i<=x;i++){
            if(i*i<=x){
                ans = i;
            }
        }
    return ans;
    }
}

second way using binary search

class Solution {
    public int mySqrt(int x) {
        long low = 0;
        long high = x;
        long ans = 0;
        while(low<=high){
            long mid = (low + (high - low)/2);
            if(mid*mid == x){
                return (int)mid;
            } else if(mid*mid < x){
                ans = mid;
                low = mid+1;
            }else{
                high = mid-1;
            }
        }
        return (int)high;
    }
}

https://leetcode.com/problems/count-negative-numbers-in-a-sorted-matrix/
brute force

class Solution {
    public int countNegatives(int[][] grid) {
        int noOfNegativeNumber = 0;
        int n = grid.length;
        int m = grid[0].length;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j] < 0){
                    noOfNegativeNumber++;
                }
            }
        }
        return noOfNegativeNumber;
    }
}


